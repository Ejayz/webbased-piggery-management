{
  // Place your webbased-piggery-management workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "PostApi": {
    "prefix": "PostApi",
    "body": [
      "import { NextApiRequest, NextApiResponse } from 'next';",
      "import authorizationHandler from 'pages/api/authorizationHandler';",
      "import connection from 'pages/api/mysql';",
      "",
      "export default async function handler(req: NextApiRequest, res: NextApiResponse) {",
      "  const authorized = await authorizationHandler(req, res, 'POST');",
      "  if (!authorized) {",
      "    return false;",
      "  }",
      "}",
      "",
      "async function UpdateCage() {",
      "  return new Promise((resolve, reject) => {",
      "    connection.getConnection((err, conn) => {",
      "      if (err) reject(err);",
      "      const sql = '';",
      "conn.query(sql,[],(err,result,feilds)=>{",
      "if(err) reject(err)",
      "resolve(result)",
      "conn.release()",
      "})",
      "    });",
      "  });",
      "}"
    ],
    "description": "Next.js POST API route handler template with authorization and database connection"
  },
  "GetApi": {
    "prefix": "GetApi",
    "body": [
      "import { NextApiRequest, NextApiResponse } from 'next';",
      "import authorizationHandler from 'pages/api/authorizationHandler';",
      "import connection from 'pages/api/mysql';",
      "",
      "export default async function handler(req: NextApiRequest, res: NextApiResponse) {",
      "  const authorized = await authorizationHandler(req, res, 'GET');",
      "  if (!authorized) {",
      "    return false;",
      "  }",
      "}",
      "",
      "async function UpdateCage() {",
      "  return new Promise((resolve, reject) => {",
      "    connection.getConnection((err, conn) => {",
      "      if (err) reject(err);",
      "      const sql = '';",
      "conn.query(sql,[],(err,result,feilds)=>{",
      "if(err) reject(err)",
      "resolve(result)",
      "conn.release()",
      "})",
      "    });",
      "  });",
      "}"
    ],
    "description": "Next.js GET API route handler template with authorization and database connection"
  }
}
